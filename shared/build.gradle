apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'

def kotlin_version = "1.3.31"
def ktor_version = "1.2.1"
def serialization_version = "0.11.0"

repositories {
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
}

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                              ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            compilations.main.outputKinds('FRAMEWORK')
        }

        fromPreset(presets.jvm, 'android')
        fromPreset(presets.iosX64, 'iosX64')
        fromPreset(presets.iosArm64, 'iosArm64')
        fromPreset(presets.macosX64, 'macosX64')
        fromPreset(presets.js, 'js') {
            compilations.main {
                configure([compileKotlinJs, compileTestKotlinJs]) {
                    kotlinOptions {
                        languageVersion = "1.3"
                        sourceMap = true
                        metaInfo = true
                        moduleKind = "umd"
                    }
                }
            }
        }

        configure([iosX64, iosArm64]) {
            compilations.main.outputKinds('FRAMEWORK')
        }
        configure([macosX64]) {
            compilations.main.outputKinds('EXECUTABLE')
        }
    }

    sourceSets {
        configure([iosX64Main, iosArm64Main]) {
            dependsOn iosMain
        }
        commonMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
            implementation "io.ktor:ktor-client-core:$ktor_version"
            implementation "io.ktor:ktor-client-json:$ktor_version"
        }

        androidMain.dependencies {
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
            implementation "io.ktor:ktor-client-android:$ktor_version"
        }

        androidTest.dependencies {
        }

        iosMain.dependencies {
            implementation "io.ktor:ktor-client-ios:$ktor_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"
        }

        jsMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
            implementation "org.jetbrains.kotlinx:kotlinx-html-js:0.6.12"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
            implementation "io.ktor:ktor-client-js:$ktor_version"
            implementation "io.ktor:ktor-client-core-js:$ktor_version"
            implementation "io.ktor:ktor-client-json-js:$ktor_version"
        }

        macosX64.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"
            implementation "io.ktor:ktor-client-curl:$ktor_version"
        }

        iosArm64Main.dependencies {
            // implementation "io.ktor:ktor-client-ios:$ktor_version"
        }

        iosX64Main.dependencies {
            // implementation "io.ktor:ktor-client-ios:$ktor_version"
        }

        commonTest.dependencies {
        }

        iosTest.dependencies {
        }
    }
}

configurations {
    compileClasspath
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'

    inputs.property "mode", mode
    dependsOn kotlin.targets.ios.compilations.main.linkTaskName("FRAMEWORK", mode)

    from { kotlin.targets.ios.compilations.main.getBinary("FRAMEWORK", mode).parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

tasks.build.dependsOn packForXCode

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn 'linkTestDebugExecutableIos'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.binaries.getExecutable('test', 'DEBUG').outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}

//////////////////////////////////////////////////////
// JS
//////////////////////////////////////////////////////

def dump(obj) {
    println("${obj.class.name}:")
    obj.properties.each { println "$it.key : ${it?.value?.class?.name}   ->   $it.value" }
    def names = obj.properties['names']
    if (names != null) {
        println(":: names: $names")
    }
}

task jsWeb(dependsOn: [jsJar]) {
    doLast {
        copy {
            def jsCompilations = kotlin.targets.js.compilations
            //from jsCompilations.main.output
            from jsCompilations.main.output
            from kotlin.sourceSets.jsMain.resources.srcDirs
            //dump(kotlin.sourceSets.jsMain)
            //dump(jsCompilations.main)
            jsCompilations.main.runtimeDependencyFiles.each {
                if (it.exists() && !it.isDirectory()) {
                    from zipTree(it.absolutePath).matching { include '*.js' }
                }
            }
            into "$buildDir/web"
        }
    }
}