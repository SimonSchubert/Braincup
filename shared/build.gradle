import org.gradle.internal.os.OperatingSystem

apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'kotlin-dce-js'

def kotlin_version = "1.3.50"
def ktor_version = "1.2.5"
def serialization_version = "0.13.0"

repositories {
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
}

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework()
            }
        }

        fromPreset(presets.jvm, 'android')
        fromPreset(presets.iosX64, 'iosX64')
        fromPreset(presets.iosArm64, 'iosArm64') {
            binaries {
                framework()
            }
        }
        if(OperatingSystem.current() == OperatingSystem.MAC_OS) {
            fromPreset(presets.macosX64, 'cli') {
                binaries {
                    executable()
                }
            }
        } else if(OperatingSystem.current()== OperatingSystem.LINUX) {
            fromPreset(presets.linuxX64, 'cli') {
                binaries {
                    executable()
                }
            }
        }
        fromPreset(presets.js, 'js') {
            compilations.main {
                configure([compileKotlinJs, compileTestKotlinJs]) {
                    kotlinOptions {
                        languageVersion = "1.3"
                        sourceMap = true
                        metaInfo = true
                        moduleKind = "umd"
                    }
                }
            }
        }

        configure([iosX64, iosArm64]) {
            // compilations.main.outputKinds("FRAMEWORK")
        }
        configure([cli]) {
            // compilations.main.outputKinds('EXECUTABLE')
        }
    }

    sourceSets {
        configure([iosX64Main, iosArm64Main]) {
            dependsOn iosMain
        }
        commonMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
            implementation "io.ktor:ktor-client-core:$ktor_version"
            implementation "io.ktor:ktor-client-json:$ktor_version"
            implementation "com.soywiz.korlibs.klock:klock:1.7.5"
            implementation "com.russhwolf:multiplatform-settings:0.4"
        }

        commonTest.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
            implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
        }

        androidMain.dependencies {
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
            implementation "io.ktor:ktor-client-android:$ktor_version"
            implementation "com.russhwolf:multiplatform-settings:0.4"
        }

        androidTest.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
            implementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
        }

        iosMain.dependencies {
            implementation "io.ktor:ktor-client-ios:$ktor_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"
        }

        jsMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
            implementation "org.jetbrains.kotlinx:kotlinx-html-js:0.6.12"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
            implementation "io.ktor:ktor-client-js:$ktor_version"
            implementation "io.ktor:ktor-client-core-js:$ktor_version"
            implementation "io.ktor:ktor-client-json-js:$ktor_version"
        }

        cliMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"
            implementation "io.ktor:ktor-client-curl:$ktor_version"
        }

        iosArm64Main.dependencies {
            // implementation "io.ktor:ktor-client-ios:$ktor_version"
        }

        iosX64Main.dependencies {
            // implementation "io.ktor:ktor-client-ios:$ktor_version"
        }

        commonTest.dependencies {
        }

        iosTest.dependencies {
        }
    }
}

configurations {
    compileClasspath
}

//////////////////////////////////////////////////////
// IOS
//////////////////////////////////////////////////////

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn 'linkTestDebugExecutableIos'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.binaries.getExecutable('test', 'DEBUG').outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}

task copyFramework {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    def bin = kotlin.targets.ios.compilations.main.target.binaries.findFramework("", buildType)
    dependsOn bin.linkTask

    doLast {
        def srcFile = kotlin.targets.ios.compilations.main.target.binaries.findFramework("", buildType).outputFile

        copy {
            from srcFile.parent
            into "$projectDir.parent/ios"
            include 'shared.framework/**'
            include 'shared.framework.dSYM'
        }
    }
}

//////////////////////////////////////////////////////
// JS
//////////////////////////////////////////////////////

def jsFiles = ["build/kotlin-js-min/js/main/kotlin.js",
"build/kotlin-js-min/js/main/kotlinx-html-js.js",
"build/kotlin-js-min/js/main/kotlinx-io.js",
"build/kotlin-js-min/js/main/kotlinx-atomicfu.js",
"build/kotlin-js-min/js/main/kotlinx-coroutines-core.js",
"build/kotlin-js-min/js/main/kotlinx-io-kotlinx-coroutines-io.js",
"build/kotlin-js-min/js/main/ktor-ktor-utils.js",
"build/kotlin-js-min/js/main/ktor-ktor-http.js",
"build/kotlin-js-min/js/main/ktor-ktor-http-cio.js",
"build/kotlin-js-min/js/main/ktor-ktor-client-core.js",
"build/kotlin-js-min/js/main/ktor-ktor-client-js.js",
"build/kotlin-js-min/js/main/ktor-ktor-client-json.js",
"build/kotlin-js-min/js/main/kotlinx-serialization-kotlinx-serialization-runtime.js",
"build/kotlin-js-min/js/main/klock-root-klock.js",
"build/kotlin-js-min/js/main/MultiplatformSettings-multiplatform-settings.js",
"build/kotlin-js-min/js/main/shared.js"]

task minifyJS(type: JavaExec) {
    main = '-jar'
    args = ["${projectDir}/tools/closure-compiler-v20190929.jar",
            "--js_output_file=$buildDir/webRelease/game.min.js"] + jsFiles
}

task jsWebDebug(dependsOn: [runDceJsKotlin]) {
    doLast {
        new File("$buildDir/webDebug").mkdirs()
        new File("$buildDir/webDebug/game.min.js").withWriter { w ->
            jsFiles.each { f ->
                new File( f ).withReader { r ->
                    w << r << '\n'
                }
            }
        }
        copy {
            from kotlin.sourceSets.jsMain.resources.srcDirs
            into "$buildDir/webDebug"
        }
    }
}

task jsWebRelease(dependsOn: [runDceJsKotlin]) {
    doLast {
        copy {
            from kotlin.sourceSets.jsMain.resources.srcDirs
            into "$buildDir/webRelease"
        }
    }
}

jsWebRelease.finalizedBy minifyJS